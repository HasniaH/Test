{"version":3,"sources":["Dragon/EtatRace.js","Dragon/TrouverRace.js","Dragon/GenererNombreAleatoire.js","App.js","reportWebVitals.js","index.js"],"names":["EtatRace","props","statitiques","stats","points","handleClick","libelles","map","stat","index","Button","variant","size","className","onClick","TrouverRace","Table","responsive","align","src","height","alt","GenererNombreAleatoire","min","max","Math","floor","random","App","useState","statistiques","setStatistiques","setPoints","affichageRace","race","nouvellesStats","slice","Container","Row","Col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOA2BkBA,MAzBlB,SAAkBC,GACd,IAAMC,EAAYD,EAAME,MAClBC,EAAOH,EAAMG,OACbC,EAAYJ,EAAMI,YAClBC,EAAS,CAAC,QAAQ,cAAc,kBAAY,WAAW,aAC7D,OACE,qCACE,6DACA,wDAAwBF,EAAxB,aACA,6BAEIF,EAAYK,KAAI,SAACC,EAAKC,GAAN,OAChB,+BAAKH,EAASG,GAAd,KAAwBD,EAAxB,QACAJ,EAAQ,GAAKI,EAAM,GACnB,cAACE,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,UAAU,MAAMC,QAAS,kBAAIT,EAAYI,IAA7E,yBACC,iB,OCeIM,MA/BjB,SAAqBd,GACjB,IAAMI,EAAYJ,EAAMI,YACxB,OACE,qCACE,oDACA,oDACA,eAACW,EAAA,EAAD,CAAQC,YAAU,EAAlB,UACE,gCACE,+BACE,oBAAIC,MAAM,SAAV,kBACA,oBAAIA,MAAM,SAAV,oBACA,oBAAIA,MAAM,SAAV,uBAGJ,gCACE,+BACE,oBAAIA,MAAM,SAAV,SACE,qBAAKC,IAAI,WAAWC,OAAO,MAAMC,IAAI,OAAOP,QAAS,kBAAIT,EAAY,aAEvE,oBAAIa,MAAM,SAAV,SACE,qBAAKC,IAAI,aAAaC,OAAO,MAAMC,IAAI,SAASP,QAAS,kBAAIT,EAAY,eAE3E,oBAAIa,MAAM,SAAV,SACE,qBAAKC,IAAI,WAAWC,OAAO,MAAMC,IAAI,OAAOP,QAAS,kBAAIT,EAAY,yBCrBnEiB,MAHlB,SAAgCC,EAAIC,GAChC,OAAOC,KAAKC,MAAMD,KAAKE,UAAWH,EAAMD,EAAK,IAAKA,GCiEvCK,MA1Df,WAEE,MAAqCC,mBAAS,MAA9C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAyBF,mBAAS,GAAlC,mBAAOzB,EAAP,KAAc4B,EAAd,KAsCGC,EAAgB,cAAC,EAAD,CAAa5B,YApChC,SAAmB6B,GACjB,IAAIC,EAAe,GACnBA,EAAe,GAAGb,EAAuB,EAAE,IAC3Ca,EAAe,GAAGb,EAAuB,EAAE,IAC3Ca,EAAe,GAAGb,EAAuB,EAAE,IAC3Ca,EAAe,GAAGb,EAAuB,EAAE,IAC3Ca,EAAe,GAAGb,EAAuB,EAAE,IAEjC,SAAPY,GAEDC,EAAe,IAAI,EACnBA,EAAe,IAAI,EAEnBA,EAAe,IAAI,EACnBA,EAAe,IAAI,GAEN,SAAPD,IAENC,EAAe,IAAI,EACnBA,EAAe,IAAI,EACnBA,EAAe,IAAI,EACnBA,EAAe,IAAI,GAGrBJ,EAAgBI,MAiBlB,OAJoB,MAAhBL,IACHG,EAAgB,cAAC,EAAD,CAAU9B,MAAO2B,EAAc1B,OAAQA,EAAQC,YAXhE,SAA0BI,GAErB,IAAI0B,EAAeL,EAAaM,QAChCD,EAAe1B,IAAQ,EAEvBuB,EAAU5B,EAAS,GACnB2B,EAAgBI,OASnB,mCACE,cAACE,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACGN,WC/CEO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAI1Bb,M","file":"static/js/main.c76d3ae2.chunk.js","sourcesContent":["import Button from 'react-bootstrap/Button'\r\n\r\nfunction EtatRace(props) {\r\n    const statitiques=props.stats;\r\n    const points=props.points;\r\n    const handleClick=props.handleClick;\r\n    const libelles=[\"Force\",\"Inteligence\",\"Dextérité\",\"Charisme\",\"Endurance\"];\r\n    return (\r\n      <>\r\n        <h1>Valider le nouvelle  profil</h1>\r\n        <h3>Points à assigner: {points} points</h3>\r\n        <ul>\r\n          {\r\n            statitiques.map((stat,index) =>        \r\n            <li>{libelles[index]}: {stat} / 18\r\n          {(points> 0 && stat <18) ?\r\n            <Button variant=\"warning\" size=\"sm\" className=\"m-1\" onClick={()=>handleClick(index)}>incrementer</Button>\r\n            :null\r\n          }\r\n          </li>\r\n  \r\n            )\r\n          }\r\n          \r\n        </ul>\r\n      </>\r\n    );\r\n  }export default EtatRace;","import Table from 'react-bootstrap/Table'\r\nfunction TrouverRace(props) {\r\n    const handleClick=props.handleClick;\r\n    return (\r\n      <>\r\n        <h1>Choisir votre race</h1>\r\n        <p>Cliquez sur l'image</p>\r\n        <Table  responsive>\r\n          <thead>\r\n            <tr>\r\n              <td align=\"center\">Nain</td>\r\n              <td align=\"center\">Humain</td>\r\n              <td align=\"center\">Elfe</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td align=\"center\">\r\n                <img src=\"nain.jpg\" height=\"200\" alt=\"nain\" onClick={()=>handleClick(\"nain\")}/>\r\n              </td>\r\n              <td align=\"center\">\r\n                <img src=\"humain.jpg\" height=\"300\" alt=\"humain\" onClick={()=>handleClick(\"humain\")}/>\r\n              </td>\r\n              <td align=\"center\">\r\n                <img src=\"elfe.jpg\" height=\"250\" alt=\"elfe\" onClick={()=>handleClick(\"elfe\")}/>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </>\r\n    );\r\n  }\r\n  export default TrouverRace;","function GenererNombreAleatoire(min,max){\r\n    return Math.floor(Math.random()* (max - min +1 ))+min;\r\n   }\r\n   export default GenererNombreAleatoire;","import React, {useState} from 'react';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport EtatRace from './Dragon/EtatRace';\nimport TrouverRace from './Dragon/TrouverRace';\nimport GenererNombreAleatoire from './Dragon/GenererNombreAleatoire';\nfunction App() {\n\n  const [statistiques,setStatistiques]=useState(null);\n  const [points,setPoints]=useState(5);\n \n  function ClickRace(race){\n    var nouvellesStats=[];\n    nouvellesStats[0]=GenererNombreAleatoire(6,12);\n    nouvellesStats[1]=GenererNombreAleatoire(6,12);\n    nouvellesStats[2]=GenererNombreAleatoire(6,12);\n    nouvellesStats[3]=GenererNombreAleatoire(6,12);\n    nouvellesStats[4]=GenererNombreAleatoire(6,12);\n\n    if(race===\"nain\"){\n\n      nouvellesStats[0]+=3;\n      nouvellesStats[1]-=2;\n      //statistiques[2]+=3;\n      nouvellesStats[2]+=3;\n      nouvellesStats[3]-=3;\n    }\n    else if(race===\"elfe\"){\n\n      nouvellesStats[0]-=2;\n      nouvellesStats[1]+=3;\n      nouvellesStats[2]+=3;\n      nouvellesStats[3]-=2;\n    }\n\n    setStatistiques(nouvellesStats);\n  }\n\n  function handleClickStats(index){\n\n       var nouvellesStats=statistiques.slice();\n       nouvellesStats[index]+=1;\n\n       setPoints(points - 1);\n       setStatistiques(nouvellesStats);\n  }\n\n var affichageRace = <TrouverRace handleClick ={ClickRace} />;\n  if (statistiques != null) {\n   affichageRace = <EtatRace stats={statistiques} points={points} handleClick={handleClickStats} />;\n  }\n\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col>\n            {affichageRace}\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n  }\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}